package Offer;

//leetcode 236
//给定一个二叉搜索树,找到该树中两个指定节点的最近公共祖先。
//百度百科中最近公共祖先的定义为：“对于有根树T的两个结点p、q，最近公共祖先表示为一个结点x，
//满足x是p、q的祖先且x的深度尽可能大（一个节点也可以是它自己的祖先）。”
//例如，给定如下二叉搜索树:root=[3,5,1,6,2,0,8,null,null,7,4]
//示例1:
//输入:root=[3,5,1,6,2,0,8,null,null,7,4],p=5,q=1
//输出:3
//解释:节点5和节点1的最近公共祖先是节点3。
//示例2:
//输入:root=[3,5,1,6,2,0,8,null,null,7,4],p=5,q=4
//输出:5
//解释:节点5和节点4的最近公共祖先是节点5。因为根据定义最近公共祖先节点可以为节点本身。
//说明:
//  所有节点的值都是唯一的。
//  p、q为不同节点且均存在于给定的二叉树中。
public class the_lowest_common_ancestor_of_two_nodes_in_the_tree_ii {
    public static void main(String[] args) {
        TreeNode root = new TreeNode(6);
        root.left = new TreeNode(2);
        root.right = new TreeNode(8);
        root.left.left = new TreeNode(0);
        root.left.right = new TreeNode(4);
        root.right.left = new TreeNode(7);
        root.right.right = new TreeNode(9);
        root.left.right.left = new TreeNode(3);
        root.left.right.right = new TreeNode(5);
        System.out.println(new the_lowest_common_ancestor_of_two_nodes_in_the_tree_ii().lowestCommonAncestor(
                root, root.left, root.left.right
        ).val);
    }

    //在左右子树中查找是否存在p或者q，如果p和q分别在两个子树中，那么就说明根节点就是最低公共祖先。
    //  2
    // / \
    //4   5
    public TreeNode lowestCommonAncestor(TreeNode root, TreeNode p, TreeNode q) {
        if (root == null || root == p || root == q) return root;
        TreeNode left = lowestCommonAncestor(root.left, p, q);
        TreeNode right = lowestCommonAncestor(root.right, p, q);
        return left == null ? right : right == null ? left : root;
    }
}
