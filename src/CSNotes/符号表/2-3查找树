2-3查找树引入了2-节点和3-节点，目的是为了让树平衡。一颗完美平衡的2-3查找树的所有空链接到根节点的距离应该是相同的。
    C
   / \
 [AB] D
1.插入操作
插入操作和BST的插入操作有很大区别，BST的插入操作是先进行一次未命中的查找，然后再将节点插入到对应的空链接上。
但是2-3查找树如果也这么做的话，那么就会破坏了平衡性。它是将新节点插入到叶子节点上。
根据叶子节点的类型不同，有不同的处理方式：
如果插入到2-节点上，那么直接将新节点和原来的节点组成3-节点即可。
    D   插入F    D
   / \        /   \
 [BC] E     [BC] [EF]
如果是插入到3-节点上，就会产生一个临时4-节点时，需要将4-节点分裂成3个2-节点，并将中间的2-节点移到上层节点中。
如果上移操作继续产生临时4-节点则一直进行分裂上移，直到不存在临时4-节点。
    D   插入A    D       [BD]
   / \         / \      / | \
 [BC] E     [ABC] E    A  C  E
2.性质
2-3查找树插入操作的变换都是局部的，除了相关的节点和链接之外不必修改或者检查树的其它部分，而这些局部变换不会影响树的全局有序性和平衡性。
2-3查找树的查找和插入操作复杂度和插入顺序无关，在最坏的情况下查找和插入操作访问的节点必然不超过logN个，
含有10亿个节点的2-3查找树最多只需要访问30个节点就能进行任意的查找和插入操作。