package DynamicProgramming;
//70
//假设你正在爬楼梯。需要 n 阶你才能到达楼顶。
//每次你可以爬 1 或 2 个台阶。你有多少种不同的方法可以爬到楼顶呢？
//注意：给定 n 是一个正整数。
//示例 1：
//输入： 2
//输出： 2
//解释： 有两种方法可以爬到楼顶。
//1.  1 阶 + 1 阶
//2.  2 阶

//示例 2：
//输入： 3
//输出： 3
//解释： 有三种方法可以爬到楼顶。
//1.  1 阶 + 1 阶 + 1 阶
//2.  1 阶 + 2 阶
//3.  2 阶 + 1 阶
public class climbing_stairs02 {
    //f(n)是n阶台阶的爬法
    //f(n)=f(n-1)+f(n-2)
    //f(1)=1
    //f(2)=2
    public static void main(String[] args) {
        System.out.println(new climbing_stairs02.Solution().climbStairs(10));
    }

    static class Solution {
        //从倒推变成顺推――请参考官方题解的多种方法
        public int climbStairs(int n) {
            int fn_1 = 2, fn_2 = 1;
            if (n == 1) {
                return 1;
            }
            if (n == 2) {
                return 2;
            }
            int fn = 0;
            //计算斐波那契数列：1 2 3 5 8 13 21
            for (int i = 3; i <= n; i++) {
                //f(n)=f(n-1)+f(n-2)
                fn = fn_2 + fn_1;
                fn_2 = fn_1;//赋值为下一个值
                fn_1 = fn;//赋值为下一个值
            }
            return fn;
        }

    }
}
