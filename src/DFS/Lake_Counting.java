package DFS;

//POJ2386
//有一个大小为N*M的园子，雨后积起了水。八连通的积水被认为是连接在一起的。请求出
//园子里总共有多少水洼?(八连通指的是下图中相对W的*的部分)
//***
//*W*
//***

//输入：
//N=10，M=12
//园子如下图('W'表示积水，'.'表示没有积水)
//W........WW.
//.WWW.....WWW
//....WW...WW.
//.........WW.
//.........W..
//..W......W..
//.W.W.....W..
//W.W.W.....W.
//.W.W......W.
//..W.......W.

//输出：3
public class Lake_Counting {
    int N = 10, M = 12;
    char[][] field = new char[][]{
            {'W', '.', '.', '.', '.', '.', '.', '.', '.', 'W', 'W', '.'},
            {'.', 'W', 'W', 'W', '.', '.', '.', '.', '.', 'W', 'W', 'W'},
            {'.', '.', '.', '.', 'W', 'W', '.', '.', '.', 'W', 'W', '.'},
            {'.', '.', '.', '.', '.', '.', '.', '.', '.', 'W', 'W', '.'},
            {'.', '.', '.', '.', '.', '.', '.', '.', '.', 'W', '.', '.'},
            {'.', '.', 'W', '.', '.', '.', '.', '.', '.', 'W', '.', '.'},
            {'.', 'W', '.', 'W', '.', '.', '.', '.', '.', 'W', '.', '.'},
            {'W', '.', 'W', '.', 'W', '.', '.', '.', '.', '.', 'W', '.'},
            {'.', 'W', '.', 'W', '.', '.', '.', '.', '.', '.', 'W', '.'},
            {'.', '.', 'W', '.', '.', '.', '.', '.', '.', '.', 'W', '.'},
    };

    public static void main(String[] args) {
        new Lake_Counting().solve();
    }

    //从任意的w开始，不停地把邻接的部分用.代替。1次DFS后与初始的这个w连接的所有w就都被替
    //换成了.，因此直到图中不再存在w为止，总共进行DFS的次数就是答案了。
    public void solve() {
        int res = 0;
        for (int i = 0; i < N; i++) {
            for (int j = 0; j < M; j++) {
                if (field[i][j] == 'W') {
                    dfs(i, j);
                    res++;
                }
            }
        }
        System.out.println(res);
    }

    public void dfs(int x, int y) {
        field[x][y] = '.';
        for (int dx = -1; dx <= 1; dx++) {
            for (int dy = -1; dy <= 1; dy++) {
                int nx = x + dx, ny = y + dy;
                if (0 <= nx && nx < N && 0 <= ny && ny < M && field[nx][ny] == 'W') {
                    dfs(nx, ny);
                }
            }
        }
    }
}
