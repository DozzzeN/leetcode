package Tree;

//108
//将一个按照升序排列的有序数组，转换为一棵高度平衡二叉搜索树。
//本题中，一个高度平衡二叉树是指一个二叉树每个节点 的左右两个子树的高度差的绝对值不超过 1。
//示例:
//给定有序数组: [-10,-3,0,5,9],
//一个可能的答案是：[0,-3,9,-10,null,5]，它可以表示下面这个高度平衡二叉搜索树：
//      0
//     / \
//   -3   9
//   /   /
// -10  5
public class convert_sorted_array_to_binary_search_tree {
    public static void main(String[] args) {
        System.out.println(new binary_tree_level_order_traversal.Solution().levelOrder
                (new convert_sorted_array_to_binary_search_tree.Solution().sortedArrayToBST(new int[]{-10, -3, 0, 5, 9})));
    }

    static class Solution {
        public TreeNode sortedArrayToBST(int[] nums) {
            return sortedArrayToBST(nums, 0, nums.length - 1);
        }

        public TreeNode sortedArrayToBST(int[] nums, int start, int end) {
            if (start > end) return null;
            int mid = (start + end) / 2;//根节点
            TreeNode node = new TreeNode(nums[mid]);
            node.left = sortedArrayToBST(nums, start, mid - 1);
            node.right = sortedArrayToBST(nums, mid + 1, end);
            return node;
        }
    }
}
