package Bit;

//405
//给定一个整数，编写一个算法将这个数转换为十六进制数。对于负整数，我们通常使用 补码运算 方法。
//注意:
//	十六进制中所有字母(a-f)都必须是小写。
//	十六进制字符串中不能包含多余的前导零。如果要转化的数为0，那么以单个字符'0'来表示；对于其他情况，十六进制字符串中的第一个字符将不会是0字符。
//	给定的数确保在32位有符号整数范围内。
//	不能使用任何由库提供的将数字直接转换或格式化为十六进制的方法。
//示例 1：
//输入:
//26
//输出:
//"1a"
//示例 2：
//输入:
//-1
//输出:
//"ffffffff"
public class convert_a_number_to_hexadecimal {
    public static void main(String[] args) {
        System.out.println(new convert_a_number_to_hexadecimal.Solution().toHex(0));
    }

    static class Solution {
        public String toHex(int num) {
            long positive = 0;
            if (num < 0) {
                positive = ((long) 1 << 32) + num;
            } else if (num > 0) {
                positive = num;
            } else {
                return "0";
            }
            StringBuilder result = new StringBuilder();
            while (positive != 0) {
                result.append(transfer(positive % 16));
                positive /= 16;
            }
            return result.reverse().toString();
        }

        public char transfer(long number) {
            switch ((int) number) {
                case 10:
                    return 'a';
                case 11:
                    return 'b';
                case 12:
                    return 'c';
                case 13:
                    return 'd';
                case 14:
                    return 'e';
                case 15:
                    return 'f';
                default:
                    return (char) (number + 48);
            }
        }
    }
}
