package Bit;

//476
//给定一个正整数，输出它的补数。补数是对该数的二进制表示取反。
//注意:
//	给定的整数保证在32位带符号整数的范围内。
//	你可以假定二进制数不包含前导零位。
//示例 1:
//输入: 5
//输出: 2
//解释: 5的二进制表示为101（没有前导零位），其补数为010。所以你需要输出2。
//示例 2:
//输入: 1
//输出: 0
//解释: 1的二进制表示为1（没有前导零位），其补数为0。所以你需要输出0。
public class number_complement {
    public static void main(String[] args) {
        System.out.println(new number_complement.Solution().findComplement(5));
    }

    static class Solution {
        public int findComplement(int num) {
            boolean flag = false;
            if (num < 0) {
                flag = true;
                num = -num;
            }
            int result = 0;
            int temp = num;
            int length = 0;
            for (; temp != 0; ) {
                temp >>= 1;
                length++;
            }
            for (int j = 0; j < length; j++) {
                result += (1 - ((num & (1 << j)) >> j)) << j;
            }
            return flag ? (1 + ~result) : result;
        }
    }
}
